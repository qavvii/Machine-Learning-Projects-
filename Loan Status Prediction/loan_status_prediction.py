# -*- coding: utf-8 -*-
"""Loan Status Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1byBzYT43drKn5I8XYF6QcFRuLqJFr9l-
"""

# prompt: import numpy  pandas seaborn  train_test_split   svm  accuracy_score

import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

# prompt: /content/loanprice.csv import this file

import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

# Load the dataset
loan_dataset = pd.read_csv('/content/loanprice.csv')

type(loan_dataset)

loan_dataset.head(4)

# number of rows and columns
loan_dataset.shape

# statistical measures
loan_dataset.describe()

# number of missing values in each column
loan_dataset.isnull().sum()

# dropping the missing values
loan_dataset = loan_dataset.dropna()

# number of missing values in each column
loan_dataset.isnull().sum()

# label encoding
loan_dataset.replace({"Loan_Status":{'N':0,'Y':1}},inplace=True)

# printing the first 5 rows of the dataframe
loan_dataset.head()

# Dependent column values
loan_dataset['Dependents'].value_counts()

#replacing the value of 3+ to 4
loan_dataset = loan_dataset.replace(to_replace='3+', value=4)

loan_dataset['Dependents'].value_counts()

sns.countplot(x='Education',hue='Loan_Status',data=loan_dataset)

"""

1.   0 means loan rejected

2.   1 means load approved


"""

sns.countplot(x='Married',hue='Loan_Status',data=loan_dataset)

sns.countplot(x='Gender',hue='Loan_Status',data=loan_dataset)  # just checking

sns.countplot(x='Property_Area',hue='Loan_Status',data=loan_dataset)

loan_dataset.head(5)

# now we convert text into number
loan_dataset.replace({  'Gender':{'Male':1,'Female':0},'Married':{'No':0,'Yes':1},
                        'Education':{'Graduate':1,'Not Graduate':0},
                        'Self_Employed':{'No':0,'Yes':1},
                        'Property_Area':{'Rural':0,'Semiurban':1,'Urban':2},
                        'Dependents':{'0':0,'1':1,'2':2,'3+':3},
                        'Loan_Status':{0:0,1:1},
                     },inplace=True)

loan_dataset.head(5)

#separating the data and label
X = loan_dataset.drop(columns=['Loan_ID','Loan_Status'],axis=1)
Y = loan_dataset['Loan_Status']

print (X)

print(Y)

#train and test
X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.1,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""Train the model
support vector machine model

"""

classifier = svm.SVC(kernel='linear')

classifier.fit(X_train,Y_train)

X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)

print('Accuracy on training data : ', training_data_accuracy)

X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction,Y_test)

print('Accuracy on test data : ', test_data_accuracy)











