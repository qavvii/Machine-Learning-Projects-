# -*- coding: utf-8 -*-
"""Wine Quality Prediction .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GwN2cFMHa915kZ_1_Ml0VPk8dF-BzZXE
"""

# prompt: import numpy pandas pyplot seaborn  train_test_split  randomForestClassifier accuracy_score

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# prompt: import this file /content/winequality-red.csv

import pandas as pd

wine_dataset= pd.read_csv('/content/winequality-red.csv')
wine_dataset.head()

#number of rows and cloumn in the dataset
wine_dataset.shape

wine_dataset.isnull().sum()



wine_dataset.describe()

wine_dataset['quality'].value_counts()

# prompt: make a graph for  quality types
plot = plt.figure(figsize=(5,5))
sns.catplot(x='quality', data=wine_dataset,   hue="quality",    kind='count', palette='rainbow')
plt.show()

#volatile acidity vs quality
plot = plt.figure(figsize=(5,5))
sns.barplot(x='quality', y='volatile acidity', data=wine_dataset,palette='rainbow')

# prompt: barplot of quality and citric_acid

# citric acid vs quality
plot = plt.figure(figsize=(5,5))
sns.barplot(x='quality', y='citric acid', data=wine_dataset, palette='rainbow')

"""lets findout the correlation in table"""



# prompt: correlation bewteen wine_dataset.corr()

correlation = wine_dataset.corr()
correlation

# prompt: heatmap for correlation

plt.figure(figsize=(15, 8))
sns.heatmap(correlation, annot=True, cmap='coolwarm', fmt=".2f",cbar=True,square=True)
# cbar is for bar fmt is a floating point value
plt.title('Correlation Matrix of Wine Quality Dataset')
plt.show()

#data preprocessing
X=wine_dataset.drop('quality',axis=1)
Y=wine_dataset['quality']
#

X

# prompt: make a graph for  quality types
plot = plt.figure(figsize=(5,5))
sns.catplot(x='quality', data=wine_dataset,   hue="quality",    kind='count', palette='rainbow')
plt.show()

"""lets convert this quality column into binary form"""

#Label binarization
Y=wine_dataset['quality'].apply(lambda yvalue: 1 if yvalue>=7 else 0)
Y

# prompt: train and test the data X and Y

# Split the data into training and testing sets
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=3)

X_train.shape , X_test.shape , Y_train.shape , Y_test.shape

# Train the Random Forest Classifier
model = RandomForestClassifier()
model.fit(X_train, Y_train)

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)
print("Accuracy on test data:", test_data_accuracy)

#building the prediction system
input_data = (0.3,0.65,0.0,0.2,0.065,5.0,1.0,0.9946,1.39,0.07,1.0)
input_data_as_numpy_array = np.asarray(input_data)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]==1):
  print('Good Quality Wine')
else:
  print('Bad Quality Wine')

#building the prediction system
input_data = (7.3,0.65,0.0,1.2,0.065,15.0,21.0,0.9946,3.39,0.47,10.0)
input_data_as_numpy_array = np.asarray(input_data)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]==1):
  print('Good Quality Wine')
else:
  print('Bad Quality Wine')











