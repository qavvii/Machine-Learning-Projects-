# -*- coding: utf-8 -*-
"""Fake News Prediction .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1590S7BQPAQykQl8mbyWSpCqxuF6EeHsm
"""

#Fake news prediction

"""About the Dataset:

1. id: unique id for a news article
2. title: the title of a news article
3. author: author of the news article
4. text: the text of the article; could be incomplete
5. label: a label that marks whether the news article is real or fake:
           1: Fake news
           0: real News

"""

import numpy as np
import pandas as pd
import re   # regular expression it is use for searching the text in document
import nltk.corpus
from nltk.corpus import stopwords  # stopwords can be define as ex: the ,or ,there ,and ,so.....
from nltk.stem.porter import PorterStemmer  #it perform the function stemming which  takes the word and remove prefix and sufix and return root word
from sklearn.feature_extraction.text import TfidfVectorizer # it will help  convert text into feature vectors (feature vectors are numbers )
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import  accuracy_score

import nltk
nltk.download("stopwords")

print (stopwords.words("english"))

#data preprocessing

#loading the dataset to pandas DataFrame
news_dataset=pd.read_csv("/content/train.csv")



news_dataset.head(3)

news_dataset.shape

news_dataset.isnull().sum()  # counting the number of missing vlaues in dataset

# prompt: replacing the null values with empty string

news_dataset = news_dataset.fillna('')

#merging the author name and news title
# merging the author name and news title
news_dataset['content'] = news_dataset['author']+' '+news_dataset['title']

print(news_dataset['content'])

# separating the data & label
X = news_dataset.drop(columns='label', axis=1)
Y = news_dataset['label']

print(X)
print(Y)

"""Stemming:

Stemming is the process of reducing a word to its Root word

example:
actor, actress, acting --> act
"""

port_stem = PorterStemmer()

def stemming(content):
    stemmed_content = re.sub('[^a-zA-Z]',' ',content)  # calling regular expression it is use for searching a word
    #re.sub(): This function replaces occurrences of a pattern in a string with a specified replacement.
    # The general syntax is re.sub(pattern, replacement, string).

    stemmed_content = stemmed_content.lower()
    stemmed_content = stemmed_content.split()

    stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
    stemmed_content = ' '.join(stemmed_content)
    return stemmed_content

news_dataset['content'] = news_dataset['content'].apply(stemming)

print(news_dataset['content'])

#separating the data and label
X = news_dataset['content'].values
Y = news_dataset['label'].values

print(X)

print(Y)

from sklearn.feature_extraction.text import TfidfVectorizer # it will help  convert text into feature vectors (feature vectors are numbers )

#lets convert X into numbers becoz binary no.s are understand by computers
#converting the textual data to numerical data

from sklearn.feature_extraction.text import TfidfVectorizer
# Instantiate the vectorizer
vectorizer = TfidfVectorizer()
# Fit the vectorizer to your data
vectorizer.fit(X)
# Transform the data
X = vectorizer.transform(X)

# prompt: print X_transforemd

print(X)

# Split the data into training and testing sets
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, stratify=Y, random_state=2)

# prompt: train the model on logistic regression

# Train the model
model = LogisticRegression()
model.fit(X_train, Y_train)

# Evaluate the model
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score of the training data : ', training_data_accuracy)

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score of the test data : ', test_data_accuracy)



X_new = X_test[3]

prediction = model.predict(X_new)
print(prediction)

if (prediction[0]==0):
  print('The news is Real')
else:
  print('The news is Fake')



