# -*- coding: utf-8 -*-
"""Medical Insurance Cost Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11q5XYjH0zSdYa5AGkRcQVRP5JZISDmei
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

# loading the data from csv file to a Pandas DataFrame
insurance_dataset = pd.read_csv('/content/insurance.csv')

# first 5 rows of the dataframe
insurance_dataset.head()

# number of rows and columns
insurance_dataset.shape

# getting some informations about the dataset
insurance_dataset.info()

"""Categorical Features:

Sex

---


Smoker

---


Region
"""

# checking for missing values
insurance_dataset.isnull().sum()

# statistical Measures of the dataset
insurance_dataset.describe()

insurance_dataset.head()

# distribution of age value
sns.set()
plt.figure(figsize=(5,5))
sns.distplot(insurance_dataset['age'])
plt.title('Age Distribution')
plt.show()

#gender
plt.figure(figsize=(5,5))
sns.countplot(x='sex', data=insurance_dataset)
plt.title('Sex Distribution')
plt.show()

#bmi
plt.figure(figsize=(5,5))
sns.distplot(insurance_dataset['bmi'])
plt.title('BMI Distribution')
plt.show()

#childer
plt.figure(figsize=(5,5))
sns.countplot(x='children', data=insurance_dataset)
plt.title('Children')
plt.show()

#smoker
plt.figure(figsize=(5,5))
sns.countplot(x='smoker', data=insurance_dataset)
plt.title('Smoker')
plt.show()

#region
plt.figure(figsize=(5,5))
sns.countplot(x='region', data=insurance_dataset)
plt.title('Region')
plt.show()

#charges
plt.figure(figsize=(5,5))
sns.displot(insurance_dataset['charges'],kde="True")
plt.title('Charges Distribution')
plt.show()

#encoding sex column
insurance_dataset.replace({'sex':{'male':0,'female':1}}, inplace=True)
# encoding smoker column
insurance_dataset.replace({'smoker':{'yes':0,'no':1}}, inplace=True)
# encoding region column
insurance_dataset.replace({'region':{'southeast':0,'southwest':1,'northeast':2,'northwest':3}}, inplace=True)

insurance_dataset.head()

x = insurance_dataset.drop(columns='charges', axis=1)
y = insurance_dataset['charges']

X_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2, random_state=2)

#load the linear regression model
model = LinearRegression()

regressor = LinearRegression()
regressor.fit(X_train, Y_train)

# prediction on training data
training_data_prediction =regressor.predict(X_train)

# R squared value   actual value and predicted value
r2_train = metrics.r2_score(Y_train, training_data_prediction)
print('R squared vale : ', r2_train)

#predction on test data
test_data_prediction = regressor.predict(X_test)
#r square value on test data
r2_test = metrics.r2_score(Y_test, test_data_prediction)
print('R squared vale : ', r2_test)

input_data = (31,1,25.74,0,1,0)

# changing input_data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the array
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = regressor.predict(input_data_reshaped)
print(prediction)

print('The insurance cost is USD ', prediction[0])





















